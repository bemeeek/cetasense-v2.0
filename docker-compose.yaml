services:

  nginx:
    image: nginx:stable-alpine
    container_name: lb_nginx
    ports:
      - "80:80"             # expose port 80 ke host
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - go_gateway
      - py_api
    networks:
      - app-network

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    restart: unless-stopped           # ‚Üê tambahkan ini
    environment:
      MYSQL_ROOT_PASSWORD: Rafi111703
      MYSQL_DATABASE: bismillahta
    volumes:
      - mariadb_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped           # opsional, supaya MinIO juga auto-restart
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    volumes:
      - ./tools/minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - app-network

  redis:
    image: redis:6-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: secret123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 5s
      retries: 5

  go_gateway:
    build:
      context: ./backend
    container_name: go_gateway
    restart: on-failure
    environment:
      - APP_ENV=development
      - PORT=8081
    env_file:
      - ./.env
    ports:
      - "8081:8081"
    depends_on:
      - mariadb
      - minio
      - redis
      - rabbitmq
    networks:
      - app-network
  
  py_api:
    build:
      context: ./backend-localization-py
      dockerfile: dockerfile
    container_name: py_api
    restart: unless-stopped
    env_file:
      - ./.env
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "8001:8000"
    depends_on:
      - go_gateway
      - mariadb
      - minio
      - redis
      - rabbitmq
    networks:
      - app-network
  
  rabbit_consumer:
    build:
      context: ./backend-localization-py
    container_name: rabbit_consumer
    restart: unless-stopped
    command: python -m app.rabbit_consumer
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - redis
      - mariadb
    networks:
      - app-network
  
  celery_worker:
    build:
      context: ./backend-localization-py
    container_name: celery_worker
    restart: unless-stopped
    env_file:
      - ./.env
    depends_on:
      - rabbitmq
      - redis
      - mariadb
      - minio
    command: celery -A app.tasks worker --loglevel=info --pool=prefork --concurrency=4
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mariadb_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  nginx_data:
    driver: local
  
